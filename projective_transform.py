# -*- coding: utf-8 -*-
"""projective_transform

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z_gBLaNOzpgvCkXWAUNcrujhLhR2j47H
"""

import numpy as np
import matplotlib.pyplot as plt

def apply_homography(points, H):
    """
    Apply projective transformation (homography).
    points: (N,2) array of xy coords
    H: 3x3 homography matrix
    """
    pts_h = np.hstack([points, np.ones((points.shape[0],1))])   # (N,3)
    warped = pts_h @ H.T                                       # (N,3)
    warped /= warped[:,2].reshape(-1,1)                        # divide by lambda
    return warped[:,:2]

# --- Original square ---
square = np.array([[0,0], [1,0], [1,1], [0,1], [0,0]])

# --- Example projective matrix (warp into trapezoid) ---
H = np.array([[1, 0.2, 0],
              [0.1, 1, 0],
              [0.001, 0.001, 1]])

projected = apply_homography(square, H)

# --- Plot ---
plt.figure(figsize=(7,7))
plt.plot(square[:,0], square[:,1], 'b-', label="Original square")
plt.plot(projected[:,0], projected[:,1], 'r-', label="Projective (Homography)")

plt.gca().set_aspect('equal', adjustable='box')
plt.grid(True, linestyle="--", alpha=0.6)
plt.legend()
plt.title("Projective Transformation of a Square")
plt.show()