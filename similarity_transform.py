# -*- coding: utf-8 -*-
"""similarity_transform

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EO0X1yr9OqNoZAh-NWF1rNJoPqeUM2iK
"""

import numpy as np
import matplotlib.pyplot as plt
from math import cos, sin, radians

def similarity_matrix(theta_deg, scale, t=(0,0)):
    """Return 2x3 similarity transform matrix"""
    theta = radians(theta_deg)
    R = np.array([[cos(theta), -sin(theta)],
                  [sin(theta),  cos(theta)]])
    M = scale * R  # scaled rotation
    t = np.array(t).reshape(2,1)
    M2x3 = np.hstack([M, t])  # 2x3 affine
    return M2x3

def apply_transform(points, M2x3):
    """Apply 2x3 transform to Nx2 points"""
    pts = np.asarray(points)
    out = pts @ M2x3[:,:2].T + M2x3[:,2]
    return out

# --- Original square ---
square = np.array([[0,0], [1,0], [1,1], [0,1], [0,0]])

# --- Transformation params ---
scale = 1.5
angle = 30
translation = (2, 1)

# Build transform and apply
M = similarity_matrix(angle, scale, translation)
transformed = apply_transform(square, M)

# --- Plot ---
plt.figure(figsize=(6,6))
plt.plot(square[:,0], square[:,1], 'b-', label="Original square")
plt.plot(transformed[:,0], transformed[:,1], 'r-', label=f"Similarity (scale={scale}, angle={angle}Â°)")

plt.gca().set_aspect('equal', adjustable='box')
plt.grid(True, linestyle="--", alpha=0.6)
plt.legend()
plt.title("Similarity Transformation of a Square")
plt.show()