# -*- coding: utf-8 -*-
"""euclidean_transform

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1olaLD2_sqiMwfOqx8LauqvxHGI9cZvST
"""

import numpy as np
import matplotlib.pyplot as plt
from math import cos, sin, radians

def rotation_matrix(theta_deg):
    theta = radians(theta_deg)
    return np.array([[cos(theta), -sin(theta)],
                     [sin(theta),  cos(theta)]])

# --- Original square (centered at origin for clarity) ---
square = np.array([[0,0], [1,0], [1,1], [0,1], [0,0]])  # closed square

# --- Transformation params ---
tx, ty = 2, 1          # translation
angle = 30             # rotation angle (deg)
center = np.array([0.5, 0.5])  # rotate about square's center

# --- Apply rotation about center ---
R = rotation_matrix(angle)
rotated = (square - center) @ R.T + center

# --- Apply translation ---
translated = rotated + np.array([tx, ty])

# --- Plot ---
plt.figure(figsize=(6,6))
plt.plot(square[:,0], square[:,1], 'b-', label="Original square")
plt.plot(rotated[:,0], rotated[:,1], 'g--', label=f"Rotated {angle}Â°")
plt.plot(translated[:,0], translated[:,1], 'r-', label="Rotated + Translated")

plt.gca().set_aspect('equal', adjustable='box')
plt.grid(True, linestyle="--", alpha=0.6)
plt.legend()
plt.title("Euclidean Transformation of a Square")
plt.show()