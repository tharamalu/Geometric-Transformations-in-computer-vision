# -*- coding: utf-8 -*-
"""affine_transform

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1to6YQw2_1G0jep_JqtdKGrjb2O16wNJM
"""

import numpy as np
import matplotlib.pyplot as plt

def apply_affine(points, A, t):
    """
    Apply affine transformation: x' = A x + t
    points: (N,2)
    A: 2x2 matrix
    t: 2x1 translation vector
    """
    pts = np.asarray(points)
    return pts @ A.T + t

# --- Original square ---
square = np.array([[0,0], [1,0], [1,1], [0,1], [0,0]])

# --- Examples of affine matrices ---
# 1. Non-uniform scaling
A_scale = np.array([[2.0, 0.0],
                    [0.0, 1.0]])
t_scale = np.array([0,0])
scaled = apply_affine(square, A_scale, t_scale)

# 2. Shear
A_shear = np.array([[1.0, 0.5],   # shear in x by factor 0.5
                    [0.0, 1.0]])
t_shear = np.array([0,0])
sheared = apply_affine(square, A_shear, t_shear)

# 3. Rotation + Translation (still affine)
theta = np.radians(30)
A_rot = np.array([[np.cos(theta), -np.sin(theta)],
                  [np.sin(theta),  np.cos(theta)]])
t_rot = np.array([2,1])  # translation
rot_trans = apply_affine(square, A_rot, t_rot)

# --- Plot results ---
plt.figure(figsize=(7,7))
plt.plot(square[:,0], square[:,1], 'b-', label="Original Square")
plt.plot(scaled[:,0], scaled[:,1], 'g-', label="Non-uniform Scaling (sx=2, sy=1)")
plt.plot(sheared[:,0], sheared[:,1], 'r-', label="Shear (a=0.5)")
plt.plot(rot_trans[:,0], rot_trans[:,1], 'm-', label="Rotation + Translation")

plt.gca().set_aspect('equal', adjustable='box')
plt.grid(True, linestyle="--", alpha=0.6)
plt.legend()
plt.title("Affine Transformations of a Square")
plt.show()